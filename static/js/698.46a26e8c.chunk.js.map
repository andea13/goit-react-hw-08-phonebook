{"version":3,"file":"static/js/698.46a26e8c.chunk.js","mappings":"iSAEaA,EAAqBC,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,QAE/BC,EAAmBH,EAAAA,EAAAA,KAAWI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qEAM9BG,EAAgBL,EAAAA,EAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8CAKzBK,EAAgBP,EAAAA,EAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gIASzBO,EAAiBT,EAAAA,EAAAA,MAAYU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,2EAM7BS,EAAiBX,EAAAA,EAAAA,GAASY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,6D,uCCiFvC,EA9FkB,WAChB,IAAAW,GAAsCC,EAAAA,EAAAA,UAAS,CAAEC,MAAO,GAAIC,SAAU,KAAKC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAApEM,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC5BI,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,OAAtBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MAEdR,GAAe,SAAAS,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAS,IAAAE,EAAAA,EAAAA,GAAA,GAAGJ,EAAOC,GAAK,GAC5D,EAwBMI,EAAQ,WACZZ,EAAe,CACbL,MAAO,GACPC,SAAU,IAEd,EAEA,OACEiB,EAAAA,EAAAA,MAAClC,EAAkB,CAAAmC,SAAA,EACjBC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,aAAc,CACZC,QAAS,CACPC,MAAO,CACLC,WAAY,UAGhBC,MAAO,CACLF,MAAO,CACLC,WAAY,YAKpBL,EAAAA,EAAAA,KAACxB,EAAc,CAAAuB,SAAC,qBAChBD,EAAAA,EAAAA,MAAC9B,EAAgB,CAACuC,SA9CD,SAAAlB,GAGnB,GAFAA,EAAMmB,iBAEDxB,EAAYJ,MAAM6B,QAAWzB,EAAYH,SAA9C,CAKA,IAAM6B,GAAcf,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfX,GAAW,IACd2B,IAAIC,EAAAA,EAAAA,QAGN1B,GAAS2B,EAAAA,EAAAA,IAAMH,IACZI,MAAK,WACJjB,GACF,IACCkB,OAAM,SAAAT,GACLU,QAAQC,IAAIX,EAAMY,QACpB,GAbF,MAFEC,EAAAA,GAAAA,MAAY,gCAgBhB,EA0B6CpB,SAAA,EACvCD,EAAAA,EAAAA,MAAC5B,EAAa,CAAA6B,SAAA,EACZC,EAAAA,EAAAA,KAAC5B,EAAa,CAAA2B,UACZD,EAAAA,EAAAA,MAACxB,EAAc,CAAAyB,SAAA,CAAC,SAEdC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,KAAK,QACL7B,KAAK,QACLC,MAAOT,EAAYJ,MACnB0C,SAAUlC,EACVmC,aAAa,MACbC,QAAQ,mBAIdxB,EAAAA,EAAAA,KAAC5B,EAAa,CAAA2B,UACZD,EAAAA,EAAAA,MAACxB,EAAc,CAAAyB,SAAA,CAAC,YAEdC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,KAAK,WACL7B,KAAK,WACLC,MAAOT,EAAYH,SACnByC,SAAUlC,EACVmC,aAAa,MACbC,QAAQ,sBAMhBxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAACJ,KAAK,SAASG,QAAQ,YAAWzB,SAAC,gBAMlD,ECnGA,EARkB,WAChB,OACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC0B,EAAS,KAGhB,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const LoginFormContainer = styled.div``;\n\nexport const LoginFormWrapper = styled.form`\n  padding: 0 20px;\n  margin: auto auto;\n  width: 500px;\n`;\n\nexport const LoginFormList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const LoginFormItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  &:first-of-type {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const LoginFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 34px;\n`;\n\nexport const LoginFormTitle = styled.h1`\n  text-align: center;\n  justify-content: center;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { login } from '../../redux/auth/authOperations';\n\nimport {\n  LoginFormContainer,\n  LoginFormWrapper,\n  LoginFormTitle,\n  LoginFormList,\n  LoginFormItem,\n  LoginFormLabel,\n} from './LoginForm.styled';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst LoginForm = () => {\n  const [loginInputs, setLoginInputs] = useState({ email: '', password: '' });\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setLoginInputs(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!loginInputs.email.trim() || !loginInputs.password) {\n      toast.error('Please fill in all the fields');\n      return;\n    }\n\n    const registeredUser = {\n      ...loginInputs,\n      id: nanoid(),\n    };\n\n    dispatch(login(registeredUser))\n      .then(() => {\n        reset();\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  const reset = () => {\n    setLoginInputs({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <LoginFormContainer>\n      <Toaster\n        toastOptions={{\n          success: {\n            style: {\n              background: 'green',\n            },\n          },\n          error: {\n            style: {\n              background: 'red',\n            },\n          },\n        }}\n      />\n      <LoginFormTitle>Please, log in </LoginFormTitle>\n      <LoginFormWrapper onSubmit={handleSubmit}>\n        <LoginFormList>\n          <LoginFormItem>\n            <LoginFormLabel>\n              Email\n              <TextField\n                type=\"email\"\n                name=\"email\"\n                value={loginInputs.email}\n                onChange={handleChange}\n                autoComplete=\"off\"\n                variant=\"outlined\"\n              />\n            </LoginFormLabel>\n          </LoginFormItem>\n          <LoginFormItem>\n            <LoginFormLabel>\n              Password\n              <TextField\n                type=\"password\"\n                name=\"password\"\n                value={loginInputs.password}\n                onChange={handleChange}\n                autoComplete=\"off\"\n                variant=\"outlined\"\n              />\n            </LoginFormLabel>\n          </LoginFormItem>\n        </LoginFormList>\n\n        <Button type=\"submit\" variant=\"contained\">\n          Log In\n        </Button>\n      </LoginFormWrapper>\n    </LoginFormContainer>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["LoginFormContainer","styled","_templateObject","_taggedTemplateLiteral","LoginFormWrapper","_templateObject2","LoginFormList","_templateObject3","LoginFormItem","_templateObject4","LoginFormLabel","_templateObject5","LoginFormTitle","_templateObject6","_useState","useState","email","password","_useState2","_slicedToArray","loginInputs","setLoginInputs","dispatch","useDispatch","handleChange","event","_event$target","target","name","value","prevState","_objectSpread","_defineProperty","reset","_jsxs","children","_jsx","Toaster","toastOptions","success","style","background","error","onSubmit","preventDefault","trim","registeredUser","id","nanoid","login","then","catch","console","log","message","toast","TextField","type","onChange","autoComplete","variant","Button","LoginForm"],"sourceRoot":""}