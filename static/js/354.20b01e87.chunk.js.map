{"version":3,"file":"static/js/354.20b01e87.chunk.js","mappings":"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","sources":["components/ContactsListItem/ContactsListItem.styled.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.styled.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/PhonebookForm/PhonebookForm.styled.jsx","components/PhonebookForm/PhonebookForm.jsx","components/ContactsFilter/ContactsFilter.styled.jsx","components/ContactsFilter/ContactsFilter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsItem = styled.li`\n  display: inline-grid;\n  // align-items: center;\n  gap: 20px;\n  border: 1px solid black;\n  margin-bottom: 20px;\n  padding: 30px;\n`;\n\nexport const ContactsItemName = styled.h2`\n  font-size: 30px;\n  font-weight: 400;\n`;\n\nexport const ContactsItemNumber = styled.p`\n  font-size: 30px;\n`;\n\nexport const ContactsItemButton = styled.button`\n  width: 100px;\n  height: 25px;\n  border: 1px solid #000;\n  border-radius: 8px;\n  background-color: #fff;\n`;\n","import {\n  ContactsItem,\n  ContactsItemName,\n  ContactsItemNumber,\n  ContactsItemButton,\n} from './ContactsListItem.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactsItem key={id}>\n      <ContactsItemName>Name: {name} </ContactsItemName>\n      <ContactsItemNumber>Phone: {number}</ContactsItemNumber>\n      <ContactsItemButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactsItemButton>\n    </ContactsItem>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactList = styled.ul`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  column-gap: 20px;\n  padding: 0;\n`;\n","import { createSelector } from 'reselect';\n\nexport const selectFilter = state => state.contacts.filter;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.items.filter(\n      ({ name }) => name && name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { ContactsListItem } from '../ContactsListItem/ContactsListItem';\nimport { ContactList } from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\n\nexport const ContactsList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactList>\n      {filteredContacts &&\n        filteredContacts.map(({ name, number, id }) => (\n          <ContactsListItem name={name} number={number} key={id} id={id} />\n        ))}\n    </ContactList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 500px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormInput = styled.input`\n  width: 250px;\n  height: 25px;\n`;\n\nexport const FormButton = styled.button`\n  width: 120px;\n  height: 23px;\n  border: 1px solid #000;\n  border-radius: 8px;\n  background-color: #fff;\n`;\n","import { useState } from 'react';\nimport { Form, FormLabel, FormInput, FormButton } from './PhonebookForm.styled';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst PhonebookForm = () => {\n  const [inputs, setInputs] = useState({ name: '', number: '' });\n  const dispatch = useDispatch();\n\n  const { items } = useSelector(selectContacts);\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setInputs(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!inputs.name.trim() || !inputs.number.trim()) {\n      alert('Please fill in all the fields');\n      return;\n    }\n\n    const duplicate = items.find(\n      item => item.name.toLowerCase() === inputs.name.toLowerCase()\n    );\n    if (duplicate) {\n      alert(`${inputs.name} is already in contacts`);\n      return;\n    }\n\n    const newContact = {\n      ...inputs,\n      id: nanoid(),\n    };\n\n    console.log(newContact);\n\n    dispatch(addContact(newContact))\n      .then(() => {\n        reset();\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  const reset = () => {\n    setInputs({ name: '', number: '' });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <FormInput\n          value={inputs.name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n      </FormLabel>\n\n      <FormLabel>\n        Number\n        <FormInput\n          value={inputs.number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n};\n\nexport default PhonebookForm;\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  height: 25px;\n  margin-top: 10px;\n`;\n","import { FilterLabel, FilterInput } from './ContactsFilter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/ContactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nexport const ContactsFilter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={`${filter}`}\n        onChange={({ target: { value } }) => handleChange(value)}\n      />\n    </FilterLabel>\n  );\n};\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport PhonebookForm from '../components/PhonebookForm/PhonebookForm';\nimport { ContactsFilter } from 'components/ContactsFilter/ContactsFilter';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from '../redux/auth/selectors';\n\nconst ContactsPage = () => {\n  const isLogged = useSelector(selectIsLoggedIn);\n  return (\n    isLogged && (\n      <>\n        <PhonebookForm />\n        <ContactsFilter />\n        <ContactsList />\n      </>\n    )\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactsItem","styled","_templateObject","_taggedTemplateLiteral","ContactsItemName","_templateObject2","ContactsItemNumber","_templateObject3","ContactsItemButton","_templateObject4","ContactsListItem","_ref","name","number","id","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteContact","ContactList","selectFilter","state","contacts","filter","selectContacts","selectFilteredContacts","createSelector","items","toLowerCase","includes","ContactsList","filteredContacts","useSelector","useEffect","fetchContacts","map","Form","FormLabel","FormInput","FormButton","_useState","useState","_useState2","_slicedToArray","inputs","setInputs","handleChange","event","_event$target","target","value","prevState","_objectSpread","_defineProperty","reset","onSubmit","preventDefault","trim","find","item","alert","concat","newContact","nanoid","console","log","addContact","then","catch","error","message","onChange","required","FilterLabel","FilterInput","ContactsFilter","setFilter","selectIsLoggedIn","_Fragment","PhonebookForm"],"sourceRoot":""}