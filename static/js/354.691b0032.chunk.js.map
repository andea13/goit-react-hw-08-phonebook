{"version":3,"file":"static/js/354.691b0032.chunk.js","mappings":"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","sources":["components/ContactsListItem/ContactsListItem.styled.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.styled.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/PhonebookForm/PhonebookForm.styled.jsx","components/PhonebookForm/PhonebookForm.jsx","components/ContactsFilter/ContactsFilter.styled.jsx","components/ContactsFilter/ContactsFilter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsItem = styled.li`\n  display: inline-grid;\n  // align-items: center;\n  gap: 20px;\n  border: 1px solid black;\n  margin-bottom: 20px;\n  padding: 30px;\n`;\n\nexport const ContactsItemName = styled.h2`\n  font-size: 30px;\n  font-weight: 400;\n`;\n\nexport const ContactsItemNumber = styled.p`\n  font-size: 30px;\n`;\n","import {\n  ContactsItem,\n  ContactsItemName,\n  ContactsItemNumber,\n} from './ContactsListItem.styled';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport Button from '@mui/material/Button';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactsItem key={id}>\n      <ContactsItemName>Name: {name} </ContactsItemName>\n      <ContactsItemNumber>Phone: {number}</ContactsItemNumber>\n      <Button type=\"button\" onClick={handleDelete} variant=\"contained\">\n        Delete\n      </Button>\n    </ContactsItem>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactList = styled.ul`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  column-gap: 20px;\n  padding: 0;\n`;\n","import { createSelector } from 'reselect';\n\nexport const selectFilter = state => state.contacts.filter;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.items.filter(\n      ({ name }) => name && name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { ContactsListItem } from '../ContactsListItem/ContactsListItem';\nimport { ContactList } from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\n\nexport const ContactsList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  console.log('filteredContacts:', filteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactList>\n      {filteredContacts &&\n        filteredContacts.map(({ name, number, _id }) => (\n          <ContactsListItem name={name} number={number} key={_id} id={_id} />\n        ))}\n    </ContactList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 500px;\n  margin-bottom: 15px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n\nexport const FormInput = styled.input`\n  width: 250px;\n  height: 25px;\n`;\n\nexport const FormButton = styled.button`\n  width: 120px;\n  height: 23px;\n  border: 1px solid #000;\n  border-radius: 8px;\n  background-color: #fff;\n`;\n","import { useState } from 'react';\nimport { Form, FormLabel } from './PhonebookForm.styled';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst PhonebookForm = () => {\n  const [inputs, setInputs] = useState({ name: '', number: '' });\n  const dispatch = useDispatch();\n\n  const { items } = useSelector(selectContacts);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setInputs(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (\n      !inputs.name ||\n      !inputs.name.trim() ||\n      !inputs.number ||\n      !inputs.number.trim()\n    ) {\n      toast.error(`Please fill out all the fields`);\n      return;\n    }\n\n    const duplicate = items.find(\n      item => item.name.toLowerCase() === inputs.name.toLowerCase()\n    );\n    if (duplicate) {\n      toast.error(`${inputs.name} is already in contacts`);\n      return;\n    }\n\n    const newContact = {\n      ...inputs,\n      id: nanoid(),\n    };\n\n    console.log('New contact:', newContact);\n\n    dispatch(addContact(newContact))\n      .then(() => {\n        reset();\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  const reset = () => {\n    setInputs({ name: '', number: '' });\n  };\n\n  return (\n    <>\n      <Toaster\n        toastOptions={{\n          error: {\n            style: {\n              background: 'red',\n              duration: 2000,\n              position: 'top-right',\n              animation: 'custom-enter 1s ease, custom-exit 1s ease',\n            },\n          },\n        }}\n      />\n      <Form onSubmit={handleSubmit}>\n        <FormLabel>\n          Name\n          <TextField\n            value={inputs.name}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n            variant=\"outlined\"\n            autoComplete=\"on\"\n          />\n        </FormLabel>\n\n        <FormLabel>\n          Number\n          <TextField\n            value={inputs.number}\n            onChange={handleChange}\n            type=\"tel\"\n            name=\"number\"\n            variant=\"outlined\"\n            autoComplete=\"on\"\n          />\n        </FormLabel>\n        <Button type=\"submit\" variant=\"contained\">\n          Add contact\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default PhonebookForm;\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n","import { FilterLabel } from './ContactsFilter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/ContactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport TextField from '@mui/material/TextField';\n\nexport const ContactsFilter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <TextField\n        type=\"text\"\n        value={`${filter}`}\n        onChange={({ target: { value } }) => handleChange(value)}\n        variant=\"outlined\"\n      />\n    </FilterLabel>\n  );\n};\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport PhonebookForm from '../components/PhonebookForm/PhonebookForm';\nimport { ContactsFilter } from 'components/ContactsFilter/ContactsFilter';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from '../redux/auth/selectors';\n\nconst ContactsPage = () => {\n  const isLogged = useSelector(selectIsLoggedIn);\n  return (\n    isLogged && (\n      <>\n        <PhonebookForm />\n        <ContactsFilter />\n        <ContactsList />\n      </>\n    )\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactsItem","styled","_templateObject","_taggedTemplateLiteral","ContactsItemName","_templateObject2","ContactsItemNumber","_templateObject3","ContactsListItem","_ref","name","number","id","dispatch","useDispatch","_jsxs","children","_jsx","Button","type","onClick","deleteContact","variant","ContactList","selectFilter","state","contacts","filter","selectContacts","selectFilteredContacts","createSelector","items","toLowerCase","includes","ContactsList","filteredContacts","useSelector","console","log","useEffect","fetchContacts","map","_id","Form","FormLabel","_templateObject4","_useState","useState","_useState2","_slicedToArray","inputs","setInputs","handleChange","event","_event$target","target","value","prevState","_objectSpread","_defineProperty","reset","_Fragment","Toaster","toastOptions","error","style","background","duration","position","animation","onSubmit","preventDefault","trim","find","item","toast","concat","newContact","nanoid","addContact","then","catch","message","TextField","onChange","autoComplete","FilterLabel","ContactsFilter","setFilter","selectIsLoggedIn","PhonebookForm"],"sourceRoot":""}